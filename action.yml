name: 'Setup ActivityWatch'
description: 'Installs ActivityWatch, with optional fakedata'
inputs:
  aw-server:
    description: 'server implementation to use'
    required: true
    default: 'aw-server'
  aw-version:
    description: 'version to use'
    required: true
    default: 'v0.10.0'
  aw-testing:
    description: 'set to false to run in prod'
    required: true
    default: true
  fakedata: 
    description: 'wether to generate fakedata'
    required: true
    default: false
runs:
  using: "composite"
  steps:
    - run: echo Setting up ${{ inputs.aw-server }} ${{ inputs.aw-version }}
      shell: bash

    - name: Download and run an ActivityWatch release
      shell: bash
      env:
          AW_SERVER: ${{ inputs.aw-server }}
          AW_VERSION: ${{ inputs.aw-version }}
          AW_TESTING: ${{ inputs.aw-testing }}
      run: |
        [[ ${{ inputs.aw-server != 'master' }} ]] && ${{ github.action_path }}/scripts/start-aw-server.sh;
        #[[ ${{ inputs.aw-server == 'aw-server-rust' && inputs.aw-version == 'master' }} ]] && ./scripts/start-aw-server-rust-master.sh;
        
    # FIXME: Composite actions don't support running other actions...
    #- name: Download aw-server-rust nightly
    #  shell: bash
    #  uses: dawidd6/action-download-artifact@v2
    #  with:
    #    repo: ActivityWatch/aw-server-rust
    #    # Required, workflow file name or ID
    #    workflow: build.yml
    #    # Optional, the status or conclusion of a completed workflow to search for
    #    # Can be one of a workflow conclusion::
    #    # "failure", "success", "neutral", "cancelled", "skipped", "timed_out", "action_required"
    #    # Or a workflow status:
    #    # "completed", "in_progress", "queued"
    #    # Default: "completed,success"
    #    workflow_conclusion: "completed"  # FIXME: Don't try to use builds that fail on Linux
    #    branch: master
    #    event: push
    #    # Uploaded artifact name,
    #    name: binaries-Linux  # NOTE: debug build
    #    # Directory where to extract artifact
    #    path: aw-server-rust

    #- name: Run aw-server-rust nightly
    #  shell: bash
    #  if: ${{ inputs.aw-server == 'aw-server-rust' && inputs.aw-version == 'master' }}
    #  run: |
    #    chmod +x ./aw-server-rust/debug/aw-server
    #    ./aw-server-rust/debug/aw-server --testing &

    - name: Insert fake data into aw-server
      shell: bash
      env:
          AW_TESTING: ${{ inputs.aw-testing }}
      run: |
        [[ ${{ inputs.fakedata == 'true' }} ]] && ${{ github.action_path }}/scripts/fakedata.sh;
